{"name": "HumanEval_100_make_a_pile", "language": "ml", "prompt": "(**Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n * - the next odd number if n is odd.\n * - the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile 3\n[3; 5; 7]\n*)\nlet make_a_pile (n : int) : int list =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_100_make_a_pile.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = make_a_pile in\n  (assert ((candidate 3) = [3; 5; 7]));\n  (assert ((candidate 4) = [4; 6; 8; 10]));\n  (assert ((candidate 5) = [5; 7; 9; 11; 13]));\n  (assert ((candidate 6) = [6; 8; 10; 12; 14; 16]));\n  (assert ((candidate 8) = [8; 10; 12; 14; 16; 18; 20; 22]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
{"name": "HumanEval_13_greatest_common_divisor", "language": "ml", "prompt": "(**Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor 3 5\n1\n>>> greatest_common_divisor 25 15\n5\n*)\nlet greatest_common_divisor (a : int) (b : int) : int =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = greatest_common_divisor in\n  (assert ((candidate 3 7) = 1));\n  (assert ((candidate 10 15) = 5));\n  (assert ((candidate 49 14) = 7));\n  (assert ((candidate 144 60) = 12));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
{"name": "HumanEval_152_compare", "language": "ml", "prompt": "(**I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two lists of scores and guesses of equal length, where each index shows a match. \nReturn a list of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n*)\nlet compare (game : int list) (guess : int list) : int list =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_152_compare.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = compare in\n  (assert ((candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; (~2)]) = [0; 0; 0; 0; 3; 3]));\n  (assert ((candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0]) = [0; 0; 0; 0; 0; 0]));\n  (assert ((candidate [1; 2; 3] [(~1); (~2); (~3)]) = [2; 4; 6]));\n  (assert ((candidate [1; 2; 3; 5] [(~1); 2; 3; 4]) = [2; 0; 0; 1]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
{"name": "HumanEval_157_right_angle_triangle", "language": "ml", "prompt": "(**Given the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*)\nlet right_angle_triangle (a : int) (b : int) (c : int) : bool =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = right_angle_triangle in\n  (assert ((candidate 3 4 5) = true));\n  (assert ((candidate 1 2 3) = false));\n  (assert ((candidate 10 6 8) = true));\n  (assert ((candidate 2 2 2) = false));\n  (assert ((candidate 7 24 25) = true));\n  (assert ((candidate 10 5 7) = false));\n  (assert ((candidate 5 12 13) = true));\n  (assert ((candidate 15 8 17) = true));\n  (assert ((candidate 48 55 73) = true));\n  (assert ((candidate 1 1 1) = false));\n  (assert ((candidate 2 2 10) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
{"name": "HumanEval_27_flip_case", "language": "ml", "prompt": "(**For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case \"Hello\"\n\"hELLO\"\n*)\nlet flip_case (string : string) : string =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_27_flip_case.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = flip_case in\n  (assert ((candidate \"\") = \"\"));\n  (assert ((candidate \"Hello!\") = \"hELLO!\"));\n  (assert ((candidate \"These violent delights have violent ends\") = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
{"name": "HumanEval_40_triples_sum_to_zero", "language": "ml", "prompt": "(**triples_sum_to_zero takes a list of integers as an input.\nit returns true if there are three distinct elements in the list that\nsum to zero, and false otherwise.\n>>> triples_sum_to_zero [1; 3; 5; 0]\nfalse\n>>> triples_sum_to_zero [1; 3; (~2); 1]\ntrue\n>>> triples_sum_to_zero [1; 2; 3; 7]\nfalse\n>>> triples_sum_to_zero [2; 4; (~5); 3; 9; 7]\ntrue\n>>> triples_sum_to_zero [1]\nfalse\n*)\nlet triples_sum_to_zero (l : int list) : bool =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = triples_sum_to_zero in\n  (assert ((candidate [1; 3; 5; 0]) = false));\n  (assert ((candidate [1; 3; 5; (~1)]) = false));\n  (assert ((candidate [1; 3; (~2); 1]) = true));\n  (assert ((candidate [1; 2; 3; 7]) = false));\n  (assert ((candidate [1; 2; 5; 7]) = false));\n  (assert ((candidate [2; 4; (~5); 3; 9; 7]) = true));\n  (assert ((candidate [1]) = false));\n  (assert ((candidate [1; 3; 5; (~100)]) = false));\n  (assert ((candidate [100; 3; 5; (~100)]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
{"name": "HumanEval_55_fib", "language": "ml", "prompt": "(**Return n-th Fibonacci number.\n>>> fib 10\n55\n>>> fib 1\n1\n>>> fib 8\n21\n*)\nlet fib (n : int) : int =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_55_fib.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = fib in\n  (assert ((candidate 10) = 55));\n  (assert ((candidate 1) = 1));\n  (assert ((candidate 8) = 21));\n  (assert ((candidate 11) = 89));\n  (assert ((candidate 12) = 144));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
{"name": "HumanEval_66_digitSum", "language": "ml", "prompt": "(**Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n * digitSum(\"\") => 0\n * digitSum(\"abAB\") => 131\n * digitSum(\"abcCd\") => 67\n * digitSum(\"helloE\") => 69\n * digitSum(\"woArBld\") => 131\n * digitSum(\"aAaaaXa\") => 153\n*)\nlet digitSum (s : string) : int =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_66_digitSum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = digitSum in\n  (assert ((candidate \"\") = 0));\n  (assert ((candidate \"abAB\") = 131));\n  (assert ((candidate \"abcCd\") = 67));\n  (assert ((candidate \"helloE\") = 69));\n  (assert ((candidate \"woArBld\") = 131));\n  (assert ((candidate \"aAaaaXa\") = 153));\n  (assert ((candidate \" How are yOu?\") = 151));\n  (assert ((candidate \"You arE Very Smart\") = 327));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
{"name": "HumanEval_72_will_it_fly", "language": "ml", "prompt": "(**Write a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\nwill_it_fly([1, 2], 5) \u279e false \n# 1+2 is less than the maximum possible weight, but it's unbalanced.\nwill_it_fly([3, 2, 3], 1) \u279e false\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\nwill_it_fly([3, 2, 3], 9) \u279e true\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\nwill_it_fly([3], 5) \u279e true\n# 3 is less than the maximum possible weight, and it's balanced.\n*)\nlet will_it_fly (q : int list) (w : int) : bool =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_72_will_it_fly.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = will_it_fly in\n  (assert ((candidate [3; 2; 3] 9) = true));\n  (assert ((candidate [1; 2] 5) = false));\n  (assert ((candidate [3] 5) = true));\n  (assert ((candidate [3; 2; 3] 1) = false));\n  (assert ((candidate [1; 2; 3] 6) = false));\n  (assert ((candidate [5] 5) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
{"name": "HumanEval_74_total_match", "language": "ml", "prompt": "(**Write a function that accepts two lists of strings and returns the list that has \ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n*)\nlet total_match (lst1 : string list) (lst2 : string list) : string list =", "doctests": "transform", "original": "/home/franlucc/MultiPL-E/datasets/../datasets/originals/HumanEval_74_total_match.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = total_match in\n  (assert ((candidate [] []) = []));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hi\"; \"hi\"]) = [\"hi\"; \"hi\"]));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hi\"; \"hi\"; \"admin\"; \"project\"]) = [\"hi\"; \"admin\"]));\n  (assert ((candidate [\"4\"] [\"1\"; \"2\"; \"3\"; \"4\"; \"5\"]) = [\"4\"]));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hI\"; \"Hi\"]) = [\"hI\"; \"Hi\"]));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hI\"; \"hi\"; \"hi\"]) = [\"hI\"; \"hi\"; \"hi\"]));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hI\"; \"hi\"; \"hii\"]) = [\"hi\"; \"admin\"]));\n  (assert ((candidate [] [\"this\"]) = []));\n  (assert ((candidate [\"this\"] []) = []));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype"]}
