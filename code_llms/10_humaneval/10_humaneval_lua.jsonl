{"name": "HumanEval_100_make_a_pile", "language": "lua", "prompt": "-- \n--     Given a positive integer n, you have to make a pile of n levels of stones.\n--     The first level has n stones.\n--     The number of stones in the next level is:\n--         - the next odd number if n is odd.\n--         - the next even number if n is even.\n--     Return the number of stones in each level in a table, where element at index\n--     i represents the number of stones in the level (i+1).\n-- \n--     Examples:\n--     >>> make_a_pile(3)\n--     {3, 5, 7}\n--     \nlocal function make_a_pile(n)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_100_make_a_pile.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "HumanEval_13_greatest_common_divisor", "language": "lua", "prompt": "--  Return a greatest common divisor of two integers a and b\n--     >>> greatest_common_divisor(3, 5)\n--     1\n--     >>> greatest_common_divisor(25, 15)\n--     5\n--     \nlocal function greatest_common_divisor(a, b)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_13_greatest_common_divisor.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "HumanEval_152_compare", "language": "lua", "prompt": "-- I think we all remember that feeling when the result of some long-awaited\n--     event is finally known. The feelings and thoughts you have at that moment are\n--     definitely worth noting down and comparing.\n--     Your task is to determine if a person correctly guessed the results of a number of matches.\n--     You are given two tables of scores and guesses of equal length, where each index shows a match. \n--     Return a table of the same length denoting how far off each guess was. If they have guessed correctly,\n--     the value is 0, and if not, the value is the absolute difference between the guess and the score.\n--     \n--     \n--     example:\n-- \n--     >>> compare({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2})\n--     {0, 0, 0, 0, 3, 3}\n--     >>> compare({0, 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2})\n--     {4, 4, 1, 0, 0, 6}\n--     \nlocal function compare(game, guess)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_152_compare.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0, 0, 0, 3, 3})\n    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}), {0, 0, 0, 0, 0, 0})\n    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}), {2, 4, 6})\n    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0, 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "HumanEval_157_right_angle_triangle", "language": "lua", "prompt": "-- \n--     Given the lengths of the three sides of a triangle. Return true if the three\n--     sides form a right-angled triangle, false otherwise.\n--     A right-angled triangle is a triangle in which one angle is right angle or \n--     90 degree.\n--     Example:\n--     >>> right_angle_triangle(3, 4, 5)\n--     true\n--     >>> right_angle_triangle(1, 2, 3)\n--     false\n--     \nlocal function right_angle_triangle(a, b, c)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_157_right_angle_triangle.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "HumanEval_27_flip_case", "language": "lua", "prompt": "--  For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n--     >>> flip_case('Hello')\n--     'hELLO'\n--     \nlocal function flip_case(string)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_27_flip_case.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'), 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "HumanEval_40_triples_sum_to_zero", "language": "lua", "prompt": "-- \n--     triples_sum_to_zero takes a table of integers as an input.\n--     it returns true if there are three distinct elements in the table that\n--     sum to zero, and false otherwise.\n-- \n--     >>> triples_sum_to_zero({1, 3, 5, 0})\n--     false\n--     >>> triples_sum_to_zero({1, 3, -2, 1})\n--     true\n--     >>> triples_sum_to_zero({1, 2, 3, 7})\n--     false\n--     >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\n--     true\n--     >>> triples_sum_to_zero({1})\n--     false\n--     \nlocal function triples_sum_to_zero(l)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_40_triples_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1, 3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "HumanEval_55_fib", "language": "lua", "prompt": "-- Return n-th Fibonacci number.\n--     >>> fib(10)\n--     55\n--     >>> fib(1)\n--     1\n--     >>> fib(8)\n--     21\n--     \nlocal function fib(n)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_55_fib.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "HumanEval_66_digitSum", "language": "lua", "prompt": "-- Task\n--     Write a function that takes a string as input and returns the sum of the upper characters only'\n--     ASCII codes.\n-- \n--     Examples:\n--     >>> digitSum('')\n--     0\n--     >>> digitSum('abAB')\n--     131\n--     >>> digitSum('abcCd')\n--     67\n--     >>> digitSum('helloE')\n--     69\n--     >>> digitSum('woArBld')\n--     131\n--     >>> digitSum('aAaaaXa')\n--     153\n--     \nlocal function digitSum(s)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_66_digitSum.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "HumanEval_72_will_it_fly", "language": "lua", "prompt": "-- \n--     Write a function that returns true if the object q will fly, and false otherwise.\n--     The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.\n-- \n--     Example:\n--     >>> will_it_fly({1, 2}, 5)\n--     false\n--     # 1+2 is less than the maximum possible weight, but it's unbalanced.\n-- \n--     >>> will_it_fly({3, 2, 3}, 1)\n--     false\n--     # it's balanced, but 3+2+3 is more than the maximum possible weight.\n-- \n--     >>> will_it_fly({3, 2, 3}, 9)\n--     true\n--     # 3+2+3 is less than the maximum possible weight, and it's balanced.\n-- \n--     >>> will_it_fly({3}, 5)\n--     true\n--     # 3 is less than the maximum possible weight, and it's balanced.\n--     \nlocal function will_it_fly(q, w)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_72_will_it_fly.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "HumanEval_74_total_match", "language": "lua", "prompt": "-- \n--     Write a function that accepts two tables of strings and returns the table that has \n--     total number of chars in the all strings of the table less than the other table.\n-- \n--     if the two tables have the same number of chars, return the first table.\n-- \n--     Examples\n--     >>> total_match({}, {})\n--     {}\n--     >>> total_match({'hi', 'admin'}, {'hI', 'Hi'})\n--     {'hI', 'Hi'}\n--     >>> total_match({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'})\n--     {'hi', 'admin'}\n--     >>> total_match({'hi', 'admin'}, {'hI', 'hi', 'hi'})\n--     {'hI', 'hi', 'hi'}\n--     >>> total_match({'4'}, {'1', '2', '3', '4', '5'})\n--     {'4'}\n--     \nlocal function total_match(lst1, lst2)\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_74_total_match.py", "prompt_terminology": "reworded", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
