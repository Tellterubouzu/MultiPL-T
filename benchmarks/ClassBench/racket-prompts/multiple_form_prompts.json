[
  {
    "name": "add_left",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A NumTree is one of:\n;; - (make-numtree Number NumTree NumTree)\n;; - Number\n;; Interpretation: A set of numbers arranged in a tree shape.\n(define-struct numtree [num left right] #:transparent)\n\n;; add-left: NumTree -> Number\n;; Adds only the numbers on the leftmost side of the tree.\n(define (add-left tree)",
    "doctests": "original",
    "original": "racket-prompts\\add_left.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (add-left 4) 4)\n(check-equal? (add-left (make-numtree 5 6 7)) 11)\n(check-equal? (add-left (make-numtree -3 (make-numtree 3 0 9) (make-numtree 4 9 10))) 0)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "add_station",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Station is a (make-station String [List-of String])\n;; Interpretation: The name of a station and the names of stations that directly\n;; connect to it.\n(define-struct station [name connections] #:transparent)\n\n;; A Subway is a [List-of Station]\n;; Interpretation: A list of stations that make a subway network.\n\n;; add-edge-to-station : String Station -> Station\n;; Adds a single edge to a station if it does not already exist.\n(define (add-edge-to-station t s)\n  (if (ormap (lambda (t2) (string=? t t2)) (station-connections s))\n      s\n      (make-station (station-name s) (cons t (station-connections s)))))\n\n;; make-connection : String String Subway -> Subway\n;; Adds a connection to the subway, if it does not\n;; already exist. Assumes that both from and to stations in the Subway.\n(define (make-connection from to subway)",
    "doctests": "original",
    "original": "racket-prompts\\add_station.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal?\n (make-connection \"Fenway\" \"Kenmore\" '()) '())\n\n(check-equal?\n (make-connection \"Fenway\" \"Kenmore\" (list \n        (make-station \"Newton Centre\" (list \"Fenway\" \"Kenmore\"))\n        (make-station \"Fenway\" (list \"Newton Highlands\" \"Newton Centre\"))\n        (make-station \"Kenmore\" (list \"Newton Centre\"))\n        (make-station \"Newton Highlands\" (list \"Fenway\"))))\n (list (make-station \"Newton Centre\" (list \"Fenway\" \"Kenmore\"))\n       (make-station \"Fenway\" (list \"Kenmore\" \"Newton Highlands\" \"Newton Centre\"))\n       (make-station \"Kenmore\" (list \"Newton Centre\"))\n       (make-station \"Newton Highlands\" (list \"Fenway\"))))\n\n(check-equal? (make-connection \"Kenmore\" \"Newton Centre\" (list \n            (make-station \"Newton Centre\" (list \"Fenway\" \"Kenmore\"))\n            (make-station \"Fenway\" (list \"Newton Highlands\" \"Newton Centre\"))\n            (make-station \"Kenmore\" (list \"Newton Centre\"))\n            (make-station \"Newton Highlands\" (list \"Fenway\")))) \n                (list \n                    (make-station \"Newton Centre\" (list \"Fenway\" \"Kenmore\"))\n                    (make-station \"Fenway\" (list \"Newton Highlands\" \"Newton Centre\"))\n                    (make-station \"Kenmore\" (list \"Newton Centre\"))\n                    (make-station \"Newton Highlands\" (list \"Fenway\"))))\n\n(check-equal? (make-connection \"A\" \"C\" (list (make-station \"A\" (list \"B\" \"D\"))\n                          (make-station \"B\" (list \"C\" \"A\"))\n                          (make-station \"C\" (list \"D\" \"B\"))\n                          (make-station \"D\" (list \"A\" \"C\"))))\n              (list (make-station \"A\" (list \"C\" \"B\" \"D\"))\n                    (make-station \"B\" (list \"C\" \"A\"))\n                    (make-station \"C\" (list \"D\" \"B\"))\n                    (make-station \"D\" (list \"A\" \"C\"))))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "apply_to_android",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Phone is one of:\n;; - (make-iphone Number)\n;; - (make-android String)\n;; - (make-pixel Number)\n;; Interpretation: A type of smartphone\n(define-struct iphone [version] #:transparent)\n(define-struct android [version] #:transparent)\n(define-struct pixel [version] #:transparent)\n\n;; apply-to-android: [Phone -> Phone] [List-of Phones] -> [List-of Phones]\n;; Applies a func to the androids in the list of phones\n(define (apply-to-android func lop)",
    "doctests": "original",
    "original": "racket-prompts\\apply_to_android.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (apply-to-android (lambda (phone) (make-android (string-upcase (android-version phone)))) \n    '()) '())\n(check-equal? (apply-to-android (lambda (phone) (make-android (string-upcase (android-version phone)))) \n    (list (make-iphone 5) (make-pixel 3) (make-android \"Cupcake\") (make-pixel 7) (make-android \"Grape\") (make-iphone 10) (make-android \"Orange\"))) \n    (list (make-iphone 5) (make-pixel 3) (make-android \"CUPCAKE\") (make-pixel 7) (make-android \"GRAPE\") (make-iphone 10) (make-android \"ORANGE\")))\n(check-equal? (apply-to-android (lambda (phone) (make-android (list->string (reverse (string->list (android-version phone)))))) \n    (list (make-iphone 5) (make-pixel 3) (make-android \"Cupcake\"))) (list (make-iphone 5) (make-pixel 3) (make-android \"ekacpuC\")))\n(check-equal? (apply-to-android (lambda (phone) (make-android (string-append (android-version phone) \"-v2\"))) \n    (list (make-iphone 5) (make-pixel 3))) (list (make-iphone 5) (make-pixel 3)))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "band_electrify",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n;; A Guitar is a (make-guitar String String Boolean)\n;; Interpretation: A (make-guitar brand-name color electric?) represents a \n;; guitar where:\n;; - brand-name is the brand name of the guitar\n;; - color is the color of the guitar\n;; - electric? is a boolean indicating whether the guitar is electric\n(define-struct guitar [brand-name color electric?] #:transparent)\n\n;; A DrumKit is a (make-drum-kit String Boolean)\n;; Interpretation: A (make-drum-kit brand-name electric?) represents\n;; a drum kit where:\n;; - brand-name is the brand name of the drum kit\n;; - electric? is a boolean indicating whether the drum kit is electric\n(define-struct drum-kit [brand-name electric?] #:transparent)\n\n;; A Saxophone is a (make-saxophone String)\n;; Interpretation: A (make-saxophone brand-name) represents a saxophone where:\n;; - brand-name is the brand name of the saxophone\n(define-struct saxophone [brand-name] #:transparent)\n\n;; A Piano is a (make-piano String)\n;; Interpretation: A (make-piano brand-name) represents a piano where:\n;; - brand-name is the brand name of the piano\n(define-struct piano [brand-name] #:transparent)\n\n;; An Instrument is one of:\n;; - Guitar\n;; - DrumKit\n;; - Saxophone\n;; - Piano\n;; Interpretation: An Instrument is one of the four musical instruments.\n\n;; A Band is one of:\n;; - (make-one-piece-band Instrument)\n;; - (make-two-piece-band Instrument Instrument)\n;; - (make-three-piece-band Instrument Instrument Instrument)\n;; Interpretation: A Band represents a band with one, two, or three members.\n(define-struct one-piece-band (instrument) #:transparent)\n(define-struct two-piece-band (instrument1 instrument2) #:transparent)\n(define-struct three-piece-band (instrument1 instrument2 instrument3) #:transparent)\n\n;; electrify-guitar : Guitar -> Guitar\n;; Makes this an electric guitar!\n(define (electrify-guitar g)\n  (make-guitar (guitar-brand-name g) (guitar-color g) #true))\n\n;; electrify-drum-kit : DrumKit -> DrumKit\n;; Makes this an electric drum kit!\n(define (electrify-drum-kit d)\n  (make-drum-kit (drum-kit-brand-name d) #true))\n\n;; electrify-instrument : Instrument -> Instrument\n;; Makes this an electric instrument!\n(define (electrify-instrument i)\n  (cond\n    [(guitar? i) (electrify-guitar i)]\n    [(drum-kit? i) (electrify-drum-kit i)]\n    [(saxophone? i) i]\n    [(piano? i) i]))\n\n;; electrify-band : Band -> Band\n;; Makes this an electric band!\n(define (electrify-band b)",
    "doctests": "original",
    "original": "racket-prompts\\band_electrify.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (electrify-band \n                (make-one-piece-band (make-guitar \"Stratocaster\" \"red\" #true))) \n                    (make-one-piece-band (make-guitar \"Stratocaster\" \"red\" #true)))\n(check-equal? (electrify-band \n                (make-two-piece-band (make-drum-kit \"Korg\" #true) (make-drum-kit \"Korg\" #false)))\n                    (make-two-piece-band (make-drum-kit \"Korg\" #true)\n                                   (make-drum-kit \"Korg\" #true)))\n(check-equal? (electrify-band \n                (make-three-piece-band (make-guitar \"Stratocaster\" \"red\" #true) (make-drum-kit \"Korg\" #false) (make-saxophone \"Yamaha\")))\n                    (make-three-piece-band (make-guitar \"Stratocaster\" \"red\" #true)\n                                     (make-drum-kit \"Korg\" #true)\n                                     (make-saxophone \"Yamaha\")))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "collatz",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; collatz: Number ->  Number\n;; Counts how many steps it takes a number to converge\n;; to 1 through the collatz sequence. The collatz sequence\n;; divides by 2 if the number is even, otherwise if the number\n;; is odd, it multiplies by 3 and adds 1\n(define (collatz num)",
    "doctests": "original",
    "original": "racket-prompts\\collatz.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (collatz 1) 0)\n(check-equal? (collatz 2) 1)\n(check-equal? (collatz 4) 2)\n(check-equal? (collatz 3) 7)\n(check-equal? (collatz 12) 9)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "flip_tree",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A NumTree is one of:\n;; - (make-numtree Number NumTree NumTree)\n;; - Number\n;; Interpretation: A set of numbers arranged in a tree shape.\n(define-struct numtree [num left right] #:transparent)\n\n;; mirror: NumTree -> NumTree\n;; Mirrors the tree around the center point\n(define (mirror tree)",
    "doctests": "original",
    "original": "racket-prompts\\flip_tree.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (mirror 5) 5)\n(check-equal? (mirror (make-numtree 5 6 7)) (make-numtree 5 7 6))\n(check-equal? (mirror (make-numtree 5 (make-numtree 8 9 10) (make-numtree 4 3 2))) (make-numtree 5 (make-numtree 4 2 3) (make-numtree 8 10 9)))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "hello_goodbye",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; hello : String -> String\n;; Greets you hello!\n(define (hello s)\n  (string-append \"Hello \" s \"!\"))\n\n;; goodbye : String -> String \n;; Greets you goodbye!\n(define (goodbye s)\n  (string-append \"Goodbye \" s \"!\"))\n\n;; hello-goodbye : [List-of String] -> [List-of String]\n;; Greets everyone hello and goodbye.\n(define (hello-goodbye l)\n  (double-do-it hello goodbye l))\n\n;; double-do-it : (X Y) [X -> Y] [X -> Y] [List-of X] -> [List-of Y]\n;; Helper for hello-goodbye. Applies both functions to each item in the list \n;; and returns a new list with the output of both functions.\n(define (double-do-it f g l)",
    "doctests": "original",
    "original": "racket-prompts\\hello_goodbye.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (hello-goodbye '()) '())\n(check-equal?\n (hello-goodbye (cons \"Alice\" (cons \"Bob\" '())))\n (cons \"Hello Alice!\" (cons \"Goodbye Alice!\" (cons \"Hello Bob!\" (cons \"Goodbye Bob!\" '())))))\n(check-equal? (double-do-it sqr sqrt '()) '())\n(check-equal? (double-do-it sqr sqrt (cons 25 (cons 9 '())))\n              (cons 625 (cons 5 (cons 81 (cons 3 '())))))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "points_and_lines",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Point is:\n;; - (make-point Number Number)\n;; Interpretation: A point on a cartesian plane\n(define-struct point [x y] #:transparent)\n\n;; A Line is:\n;; - (make-line Point Point)\n;; Interpretation: A straight line between two points\n(define-struct line [start end] #:transparent)\n\n;; manhattan-distance: Line -> Number\n;; Computes the manhattan distance that a line covers\n;; manhattan distance = |x_1 - x_2| + |y_1 - y_2|\n(define (manhattan-distance l)",
    "doctests": "original",
    "original": "racket-prompts\\points_and_lines.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (manhattan-distance (make-line (make-point 0 0) (make-point 4 3))) 7)\n(check-equal? (manhattan-distance (make-line (make-point 1 3) (make-point 4 3))) 3)\n(check-equal? (manhattan-distance (make-line (make-point 4 2) (make-point 4 3))) 1)\n(check-equal? (manhattan-distance (make-line (make-point 5 8) (make-point 4 3))) 6)\n(check-equal? (manhattan-distance (make-line (make-point 7 0) (make-point 7 -5))) 5)\n(check-equal? (manhattan-distance (make-line (make-point 4 0) (make-point -4 0))) 8)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "series",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Computable is:\n;; - (make-computable X [X -> X])\n;; Interpretation: A value that can be processed by the function to make a series\n(define-struct computable [value func] #:transparent)\n\n;; update: Computable -> Computable\n;; Runs the computable to make the next computable in the series\n(define (update c)",
    "doctests": "original",
    "original": "racket-prompts\\series.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(define (add-one x) (+ x 1))\n(define 0-add-one (make-computable 5 add-one))\n(define 1-add-one (update 0-add-one))\n(define 2-add-one (update 1-add-one))\n(check-equal? (computable-value (update 0-add-one)) 6)\n(check-equal? (computable-value (update 1-add-one)) 7)\n(check-equal? (computable-value (update 2-add-one)) 8)\n(define (repeat-string s) (string-append s s))\n(define 0-repeat-string (make-computable \"hi\" repeat-string))\n(define 1-repeat-string (update 0-repeat-string))\n(define 2-repeat-string (update 1-repeat-string))\n(check-equal? (computable-value (update 0-repeat-string)) \"hihi\")\n(check-equal? (computable-value (update 1-repeat-string)) \"hihihihi\")\n(check-equal? (computable-value (update 2-repeat-string)) \"hihihihihihihihi\")\n(define (divide-2 x) (/ x 2))\n(define 0-divide-2 (make-computable 40 divide-2))\n(define 1-divide-2 (update 0-divide-2))\n(define 2-divide-2 (update 1-divide-2))\n(check-equal? (computable-value (update 0-divide-2)) 20)\n(check-equal? (computable-value (update 1-divide-2)) 10)\n(check-equal? (computable-value (update 2-divide-2)) 5)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "shapes",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Shape is one of:\n;; - (make-circle Number)\n;; - (make-rectangle Number Number)\n;; - (make-triangle Number Number Number)\n;; Interpretation: A closed shape\n(define-struct circle [radius] #:transparent)\n(define-struct rectangle [w l] #:transparent)\n(define-struct triangle [s1 s2 s3] #:transparent)\n\n;; circle-perimeter: Circle -> Number\n;; Computes the perimeter of a circle\n(define (circle-perimeter c)\n    (* 6.28 (circle-radius c)))\n\n;; rectangle-perimeter: Rectangle -> Number\n;; Computes the perimeter of a rectangle\n(define (rectangle-perimeter r)\n    (+ (* 2 (rectangle-w r)) (* 2 (rectangle-l r))))\n\n;; triangle-perimeter: Triangle -> Number\n;; Computes the perimeter of a triangle\n(define (triangle-perimeter t)\n    (+ (triangle-s1 t) (+ (triangle-s2 t) (triangle-s3 t))))\n\n;; shape-perimeter: Shape -> Number\n;; Computes the perimeter of any Shape\n(define (shape-perimeter s)",
    "doctests": "original",
    "original": "racket-prompts\\shapes.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (shape-perimeter (make-circle 2)) 12.56)\n(check-equal? (shape-perimeter (make-rectangle 2 4)) 12)\n(check-equal? (shape-perimeter (make-triangle  3 3 3)) 9)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "social_time",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A CallType is one of:\n;; - \"zoom\"\n;; - \"teams\"\n;; - \"phone\"\n;; Interpretation: a type of call\n\n(define CT-ZOOM \"zoom\")\n(define CT-TEAMS \"teams\")\n(define CT-PHONE \"phone\")\n\n;; An Event is one of:\n;; - (make-call CallType PosInt [NEList-of String] String)\n;; - (make-mtg PosInt [NEList-of String] String)\n;; - (make-alone PosInt String)\n;; Interpretation: an event in some period of time, which is either:\n;; - A call using some technology, lasting some number of minutes with attendees\n;;  (by name), and a description;\n;; - An in-person meeting lasting some number of minutes\n;;   with attendees (by name) and a description; or\n;; - Time spent alone for some number of minutes with a description.\n(define-struct call [type duration attendees description] #:transparent)\n(define-struct mtg [duration attendees description] #:transparent)\n(define-struct alone [duration description] #:transparent)\n\n;; social-time : Event -> PosInt\n;; gets the duration of calls and meetings; 0 for alone\n(define (social-event-time e)\n  (cond\n    [(call? e) (call-duration e)]\n    [(mtg? e) (mtg-duration e)]\n    [(alone? e) 0]))\n\n;; social-time : [List-of Event] -> PosInt\n;; how much time was spent on calls and meetings?\n(define (social-time loe)",
    "doctests": "original",
    "original": "racket-prompts\\social_time.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (social-time '()) 0)\n(check-equal? (social-time (list (make-call CT-ZOOM 22 (list \"Dr. Zoidberg\")\n             \"Doctor appointment about a stomach ache after some bad seafood :(\") \n             (make-alone 25 \"The Three-Body Problem isn't going to read itself!\") \n             (make-call CT-PHONE 1 (list \"Unknown\") \"Who calls!? I think it was a scam...\")\n                (make-alone 34 \"Lunch\") \n                (make-call CT-TEAMS 7 (list \"Mike\" \"Tajel\")\n             \"Office hours with my partner to ask clarifying questions about the Design Recipe!\") \n                (make-mtg 28 (list \"Ali\")\n            \"Meeting with advisor to talk about a combined major\")\n                 (make-mtg 62 (list \"Rachel\" \"Ross\" \"Joey\" \"Phoebe\" \"Chandler\" \"Monica\")\n            \"Getting ahead on studying for Exam 2!\"))) 120)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  }
]