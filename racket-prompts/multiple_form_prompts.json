[
  {
    "name": "add_station",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Station is a (make-station String [List-of String])\n;; Interpretation: The name of a station and the names of stations that directly\n;; connect to it.\n(define-struct station [name connections] #:transparent)\n\n;; A Subway is a [List-of Station]\n;; Interpretation: A list of stations that make a subway network.\n\n;; add-edge-to-station : String Station -> Station\n;; Adds a single edge to a station.\n(define (add-edge-to-station t s)\n  (if (ormap (\u00ce\u00bb (t2) (string=? t t2)) (station-connections s))\n      s\n      (make-station (station-name s) (cons t (station-connections s)))))\n\n;; add-edge : String String Subway -> Subway\n;; (add-edge from to station) adds a connection to the subway, if it does not\n;; already exist. Assumes that both from and to stations in the Subway.\n(define (add-edge from to subway)",
    "doctests": "original",
    "original": "racket-prompts\\add_station.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal?\n (add-edge \"Fenway\" \"Kenmore\" '()) '())\n\n(check-equal?\n (add-edge \"Fenway\" \"Kenmore\" (list \n        (make-station \"Newton Centre\" (list \"Fenway\" \"Kenmore\"))\n        (make-station \"Fenway\" (list \"Newton Highlands\" \"Newton Centre\"))\n        (make-station \"Kenmore\" (list \"Newton Centre\"))\n        (make-station \"Newton Highlands\" (list \"Fenway\"))))\n (list (make-station \"Newton Centre\" (list \"Fenway\" \"Kenmore\"))\n       (make-station \"Fenway\" (list \"Kenmore\" \"Newton Highlands\" \"Newton Centre\"))\n       (make-station \"Kenmore\" (list \"Newton Centre\"))\n       (make-station \"Newton Highlands\" (list \"Fenway\"))))\n\n(check-equal? (add-edge \"Kenmore\" \"Newton Centre\" (list \n            (make-station \"Newton Centre\" (list \"Fenway\" \"Kenmore\"))\n            (make-station \"Fenway\" (list \"Newton Highlands\" \"Newton Centre\"))\n            (make-station \"Kenmore\" (list \"Newton Centre\"))\n            (make-station \"Newton Highlands\" (list \"Fenway\")))) \n                (list \n                    (make-station \"Newton Centre\" (list \"Fenway\" \"Kenmore\"))\n                    (make-station \"Fenway\" (list \"Newton Highlands\" \"Newton Centre\"))\n                    (make-station \"Kenmore\" (list \"Newton Centre\"))\n                    (make-station \"Newton Highlands\" (list \"Fenway\"))))\n\n(check-equal? (add-edge \"A\" \"C\" (list (make-station \"A\" (list \"B\" \"D\"))\n                          (make-station \"B\" (list \"C\" \"A\"))\n                          (make-station \"C\" (list \"D\" \"B\"))\n                          (make-station \"D\" (list \"A\" \"C\"))))\n              (list (make-station \"A\" (list \"C\" \"B\" \"D\"))\n                    (make-station \"B\" (list \"C\" \"A\"))\n                    (make-station \"C\" (list \"D\" \"B\"))\n                    (make-station \"D\" (list \"A\" \"C\"))))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "apply_to_android",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Phone is one of:\n;; - (make-iphone Number)\n;; - (make-android String)\n;; - (make-pixel Number)\n;; Interpretation: A type of smartphone\n(define-struct iphone [version] #:transparent)\n(define-struct android [version] #:transparent)\n(define-struct pixel [version] #:transparent)\n\n;; apply-to-android: [Phone -> Phone] [List-of Phones] -> [List-of Phones]\n;; Applies a func to the androids in the list of phones\n(define (apply-to-android func lop)",
    "doctests": "original",
    "original": "racket-prompts\\apply_to_android.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (apply-to-android (lambda (phone) (make-android (string-upcase (android-version phone)))) \n    '()) '())\n(check-equal? (apply-to-android (lambda (phone) (make-android (string-upcase (android-version phone)))) \n    (list (make-iphone 5) (make-pixel 3) (make-android \"Cupcake\") (make-pixel 7) (make-android \"Grape\") (make-iphone 10) (make-android \"Orange\"))) \n    (list (make-iphone 5) (make-pixel 3) (make-android \"CUPCAKE\") (make-pixel 7) (make-android \"GRAPE\") (make-iphone 10) (make-android \"ORANGE\")))\n(check-equal? (apply-to-android (lambda (phone) (make-android (list->string (reverse (string->list (android-version phone)))))) \n    (list (make-iphone 5) (make-pixel 3) (make-android \"Cupcake\"))) (list (make-iphone 5) (make-pixel 3) (make-android \"ekacpuC\")))\n(check-equal? (apply-to-android (lambda (phone) (make-android (string-append (android-version phone) \"-v2\"))) \n    (list (make-iphone 5) (make-pixel 3))) (list (make-iphone 5) (make-pixel 3)))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "band_electrify",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n;; A Guitar is a (make-guitar String String Boolean)\n;; Interpretation: A (make-guitar brand-name color electric?) represents a \n;; guitar where:\n;; - brand-name is the brand name of the guitar\n;; - color is the color of the guitar\n;; - electric? is a boolean indicating whether the guitar is electric\n(define-struct guitar [brand-name color electric?] #:transparent)\n\n;; A DrumKit is a (make-drum-kit String Boolean)\n;; Interpretation: A (make-drum-kit brand-name electric?) represents\n;; a drum kit where:\n;; - brand-name is the brand name of the drum kit\n;; - electric? is a boolean indicating whether the drum kit is electric\n(define-struct drum-kit [brand-name electric?] #:transparent)\n\n;; A Saxophone is a (make-saxophone String)\n;; Interpretation: A (make-saxophone brand-name) represents a saxophone where:\n;; - brand-name is the brand name of the saxophone\n(define-struct saxophone [brand-name] #:transparent)\n\n;; A Piano is a (make-piano String)\n;; Interpretation: A (make-piano brand-name) represents a piano where:\n;; - brand-name is the brand name of the piano\n(define-struct piano [brand-name] #:transparent)\n\n;; An Instrument is one of:\n;; - Guitar\n;; - DrumKit\n;; - Saxophone\n;; - Piano\n;; Interpretation: An Instrument is one of the four musical instruments.\n\n;; A Band is one of:\n;; - (make-one-piece-band Instrument)\n;; - (make-two-piece-band Instrument Instrument)\n;; - (make-three-piece-band Instrument Instrument Instrument)\n;; Interpretation: A Band represents a band with one, two, or three members.\n(define-struct one-piece-band (instrument) #:transparent)\n(define-struct two-piece-band (instrument1 instrument2) #:transparent)\n(define-struct three-piece-band (instrument1 instrument2 instrument3) #:transparent)\n\n;; electrify-guitar : Guitar -> Guitar\n;; Makes this an electric guitar!\n(define (electrify-guitar g)\n  (make-guitar (guitar-brand-name g) (guitar-color g) #true))\n\n;; electrify-drum-kit : DrumKit -> DrumKit\n;; Makes this an electric drum kit!\n(define (electrify-drum-kit d)\n  (make-drum-kit (drum-kit-brand-name d) #true))\n\n;; electrify-instrument : Instrument -> Instrument\n;; Makes this an electric instrument!\n(define (electrify-instrument i)\n  (cond\n    [(guitar? i) (electrify-guitar i)]\n    [(drum-kit? i) (electrify-drum-kit i)]\n    [(saxophone? i) i]\n    [(piano? i) i]))\n\n;; electrify-band : Band -> Band\n;; Makes this an electric band!\n(define (electrify-band b)",
    "doctests": "original",
    "original": "racket-prompts\\band_electrify.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (electrify-band \n                (make-one-piece-band (make-guitar \"Stratocaster\" \"red\" #true))) \n                    (make-one-piece-band (make-guitar \"Stratocaster\" \"red\" #true)))\n(check-equal? (electrify-band \n                (make-two-piece-band (make-drum-kit \"Korg\" #true) (make-drum-kit \"Korg\" #false)))\n                    (make-two-piece-band (make-drum-kit \"Korg\" #true)\n                                   (make-drum-kit \"Korg\" #true)))\n(check-equal? (electrify-band \n                (make-three-piece-band (make-guitar \"Stratocaster\" \"red\" #true) (make-drum-kit \"Korg\" #false) (make-saxophone \"Yamaha\")))\n                    (make-three-piece-band (make-guitar \"Stratocaster\" \"red\" #true)\n                                     (make-drum-kit \"Korg\" #true)\n                                     (make-saxophone \"Yamaha\")))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "count_tree",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n; An OrgChart is one of:\n; - (make-person String String [List-of OrgChart])\n; - (make-group String [List-of OrgChart])\n; Interpretation: an organizational chart\n(define-struct person [name title reports]  #:transparent)\n(define-struct group [name members] #:transparent)\n\n; num-peeps : OrgChart -> Nat\n; counts people in an org chart\n(define (num-peeps org)",
    "doctests": "original",
    "original": "racket-prompts\\count_tree.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal?\n (num-peeps (make-group \"test\" '())) 0)\n\n(check-equal?\n (num-peeps (make-person \"David Madigan\"\n               \"Provost and Senior Vice President for Academic Affairs\"\n               (list\n                (make-group \"Administration\"\n                            (list (make-person \"Thomas Sheahan\"\n                                               \"Senior Vice Provost, Curriculum and Programs\" '())))\n                (make-group \"Academic Deans\"\n                            (list (make-person \"Alan Mislove\"\n                                               \"Interim Dean, Khoury College of Computer Sciences\"\n                                               '())\n                                  (make-person \"Carmen Sceppa\"\n                                               \"Dean, Bouv\u00c3\u00a9 College of Health Sciences\"\n                                               '())\n                                  (make-person \"Uta G. Poiger\"\n                                               \"Dean, College of Social Sciences & Humanities\"\n                                               '())))))) 5)\n\n(check-equal?\n (num-peeps (make-group \"Cabinet\"\n              (list (make-person \"Karl Reid\"\n                                 \"Senior Vice Provost and Inclusion Officer\"\n                                 '())\n                    (make-person \"Madeleine Estabrook\"\n                                 \"Senior Advisor for Global Student Experience\"\n                                 '())\n                    (make-person \"David Madigan\"\n               \"Provost and Senior Vice President for Academic Affairs\"\n               (list\n                (make-group \"Administration\"\n                            (list (make-person \"Thomas Sheahan\"\n                                               \"Senior Vice Provost, Curriculum and Programs\" '())))\n                (make-group \"Academic Deans\"\n                            (list (make-person \"Alan Mislove\"\n                                               \"Interim Dean, Khoury College of Computer Sciences\"\n                                               '())\n                                  (make-person \"Carmen Sceppa\"\n                                               \"Dean, Bouv\u00c3\u00a9 College of Health Sciences\"\n                                               '())\n                                  (make-person \"Uta G. Poiger\"\n                                               \"Dean, College of Social Sciences & Humanities\"\n                                               '())))))))) 7)\n\n(check-equal?\n (num-peeps (make-person \"Joseph E. Aoun\"\n               \"President\"\n               (list (make-group \"Cabinet\"\n              (list (make-person \"Karl Reid\"\n                                 \"Senior Vice Provost and Inclusion Officer\"\n                                 '())\n                    (make-person \"Madeleine Estabrook\"\n                                 \"Senior Advisor for Global Student Experience\"\n                                 '())\n                    (make-person \"David Madigan\"\n               \"Provost and Senior Vice President for Academic Affairs\"\n               (list\n                (make-group \"Administration\"\n                            (list (make-person \"Thomas Sheahan\"\n                                               \"Senior Vice Provost, Curriculum and Programs\" '())))\n                (make-group \"Academic Deans\"\n                            (list (make-person \"Alan Mislove\"\n                                               \"Interim Dean, Khoury College of Computer Sciences\"\n                                               '())\n                                  (make-person \"Carmen Sceppa\"\n                                               \"Dean, Bouv\u00c3\u00a9 College of Health Sciences\"\n                                               '())\n                                  (make-person \"Uta G. Poiger\"\n                                               \"Dean, College of Social Sciences & Humanities\"\n                                               '())))))))))) 8)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "dna_inverse",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n;; A DNASeq is one of:\n;; - (make-adenine DNASeq)\n;; - (make-guanine DNASeq)\n;; - (make-cytosine DNASeq)\n;; - (make-thymine DNASeq)\n;; - \"empty sequence\"\n;; Interpretation: A DNASeq represents a sequence of nucleotides.\n(define-struct adenine [rest] #:transparent)\n(define-struct guanine [rest] #:transparent)\n(define-struct cytosine [rest] #:transparent)\n(define-struct thymine [rest] #:transparent)\n\n;; Every  DNA sequence has a complementary sequence, which substitutes\n;; As with Ts, Ts with As, Cs with Gs, and Gs with Cs. Design a function\n;; to calculate the complement of a DNA sequence.\n\n;; dna-complement : DNASeq -> DNASeq\n;; Computes the complement of a DNA sequence.\n(define (dna-complement d)",
    "doctests": "original",
    "original": "racket-prompts\\dna_inverse.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (dna-complement \"empty sequence\") \"empty sequence\")\n(check-equal? (dna-complement (make-adenine \"empty sequence\")) (make-thymine \"empty sequence\"))\n(check-equal? (dna-complement (make-thymine (make-cytosine (make-guanine (make-adenine \"empty sequence\")))))\n              (make-adenine (make-guanine (make-cytosine (make-thymine \"empty sequence\")))))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "grades",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Student is a (make-student String Number)\n;; Interpretation: (make-student name nuid) represents a student.\n(define-struct student [name nuid] #:transparent)\n\n;; A Grade is a (make-grade Number String Number)\n;; Interpretation: (make-grade nuid course grade) represents the grade that\n;; a student received in a course.\n(define-struct grade [nuid course value] #:transparent)\n\n;; A StudentGrades is a (make-student-grades String [List-of Number]).\n;; Interpretation: (make-student-grades name grades) represents the grades\n;; that a student has received in all courses.\n(define-struct student-grades [name grades] #:transparent)\n\n;; student-grades: [List-of Student] [List-of Grade] -> [List-of StudentGrades]\n;; Produces a StudentGrade for each student, with the list of grades that\n;; student received.\n(define (students->student-grades students grades)",
    "doctests": "original",
    "original": "racket-prompts\\grades.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal?\n (students->student-grades '() '())\n '())\n\n(check-equal?\n (students->student-grades '() (list  (make-grade 1 \"Fundies 1\" 95) (make-grade 1 \"Psychoceramics\" 65) (make-grade 2 \"Programming Languages\" 85) (make-grade 2 \"Fundies 1\" 75)))\n '())\n\n(check-equal?\n (students->student-grades (list (make-student \"Alice\" 1) (make-student \"Bob\" 2)) '())\n (list (make-student-grades \"Alice\" '()) (make-student-grades \"Bob\" '())))\n\n(check-equal?\n (students->student-grades (list (make-student \"Alice\" 1))\n                           (list  (make-grade 1 \"Fundies 1\" 95) (make-grade 1 \"Psychoceramics\" 65) (make-grade 2 \"Programming Languages\" 85) (make-grade 2 \"Fundies 1\" 75)))\n (list (make-student-grades \"Alice\" (list 95 65))))\n\n(check-equal?\n (students->student-grades (list (make-student \"Alice\" 1) (make-student \"Bob\" 2) (make-student \"Carol\" 3))\n                           (list  (make-grade 1 \"Fundies 1\" 95) (make-grade 1 \"Psychoceramics\" 65) (make-grade 2 \"Programming Languages\" 85) (make-grade 2 \"Fundies 1\" 75)\n                                 (make-grade 3 \"Fundies 1\" 68) (make-grade 3 \"Cybernetics\" 82) (make-grade 3 \"Phonology\" 89) (make-grade 4 \"Fundies 1\" 55)))\n (list (make-student-grades \"Alice\" (list 95 65)) (make-student-grades \"Bob\" (list 85 75)) (make-student-grades \"Carol\" (list 68 82 89))))\n",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "had_lunch",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A CallType is one of:\n;; - \"zoom\"\n;; - \"teams\"\n;; - \"phone\"\n;; Interpretation: a type of call\n\n(define CT-ZOOM \"zoom\")\n(define CT-TEAMS \"teams\")\n(define CT-PHONE \"phone\")\n\n;; An Event is one of:\n;; - (make-call CallType PosInt [NEList-of String] String)\n;; - (make-mtg PosInt [NEList-of String] String)\n;; - (make-alone PosInt String)\n;; Interpretation: an event in some period of time, which is either:\n;; - A call using some technology, lasting some number of minutes with attendees\n;;  (by name), and a description;\n;; - An in-person meeting lasting some number of minutes\n;;   with attendees (by name) and a description; or\n;; - Time spent alone for some number of minutes with a description.\n(define-struct call [type duration attendees description] #:transparent)\n(define-struct mtg [duration attendees description] #:transparent)\n(define-struct alone [duration description] #:transparent)\n\n;; had-lunch? : [List-of Event] -> Boolean\n;; Is there an event containing the word lunch?\n(define (had-lunch? loe)",
    "doctests": "original",
    "original": "racket-prompts\\had_lunch.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (had-lunch? '()) #false)\n(check-equal? (had-lunch? (list (make-call CT-ZOOM 22 (list \"Dr. Zoidberg\")\n             \"Doctor appointment about a stomach ache after some bad seafood :(\") \n             (make-alone 25 \"The Three-Body Problem isn't going to read itself!\") \n             (make-call CT-PHONE 1 (list \"Unknown\") \"Who calls!? I think it was a scam...\")\n                (make-alone 34 \"Lunch\") \n                (make-call CT-TEAMS 7 (list \"Mike\" \"Tajel\")\n             \"Office hours with my partner to ask clarifying questions about the Design Recipe!\") \n                (make-mtg 28 (list \"Ali\")\n            \"Meeting with advisor to talk about a combined major\")\n                 (make-mtg 62 (list \"Rachel\" \"Ross\" \"Joey\" \"Phoebe\" \"Chandler\" \"Monica\")\n            \"Getting ahead on studying for Exam 2!\"))) #true)\n(check-equal? (had-lunch? (list (make-call CT-ZOOM 22 (list \"Dr. Zoidberg\")\n             \"Doctor appointment about a stomach ache after some bad seafood :(\"))) #false)\n(check-equal?\n (had-lunch? (list (make-call CT-ZOOM 22 (list \"Dr. Zoidberg\")\n             \"Doctor appointment about a stomach ache after some bad seafood :(\")\n                   (make-call CT-ZOOM 20 (list \"Mom\") \"Virtual lunch\")))\n #true)\n(check-equal?\n (had-lunch? (list (make-call CT-ZOOM 22 (list \"Dr. Zoidberg\")\n             \"Doctor appointment about a stomach ache after some bad seafood :(\")\n                   (make-mtg 50 (list \"Alice\" \"Bob\") \"GROUP LUNCH\")))\n #true)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "make_subway",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Station is a (make-station String [List-of String])\n;; Interpretation: The name of a station and the names of stations that directly\n;; connect to it.\n(define-struct station [name connections] #:transparent)\n\n;; A Subway is a [List-of Station]\n;; Interpretation: A list of stations that make a subway network.\n\n;; A [List-of-2-or-more X] is one of:\n;; - (cons X (cons X '()))\n;; - (cons X [List-of-2-or-more X])\n;; A list with two or more items.\n\n;; add-forward-edges : Subway [List-of-2-or-more String] -> Subway\n;; Adds the list of stations to the subway, in one direction.\n(define (add-forward-edges subway lo2om)\n  (cond\n    [(empty? (rest (rest lo2om))) \n     (add-edge (first lo2om) (first (rest lo2om)) subway)]\n    [(cons? (rest (rest lo2om)))\n     (add-forward-edges\n      (add-edge (first lo2om) (first (rest lo2om)) subway)\n      (rest lo2om))]))\n\n;; add-edge : String String Subway -> Subway\n;; (add-edge from to station) adds a connection to the subway, if it does not\n;; already exist. Assumes that both from and to stations in the Subway.\n(define (add-edge from to subway)\n  (cond\n    [(empty? subway) subway]\n    [(cons? subway)\n     (if (string=? from (station-name (first subway)))\n         (cons (add-edge-to-station to (first subway)) (rest subway))\n         (cons (first subway) (add-edge from to (rest subway))))]))\n\n;; line->subway : [List-of-2-or-more String] -> Subway\n;; Given a list of stations on a line, produces a Subway.\n(define (line->subway line)",
    "doctests": "original",
    "original": "racket-prompts\\make_subway.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? \n (line->subway (list \"A\" \"B\"))\n (list (make-station \"A\" (list \"B\"))\n       (make-station \"B\" (list \"A\"))))\n\n(check-equal? \n (line->subway (list \"A\" \"B\" \"C\"))\n (list (make-station \"A\" (list \"B\"))\n       (make-station \"B\" (list \"A\" \"C\"))\n       (make-station \"C\" (list \"B\"))))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "org_trees",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n; An OrgChart is one of:\n; - (make-person String String [List-of OrgChart])\n; - (make-group String [List-of OrgChart])\n; Interpretation: an organizational chart\n(define-struct person [name title reports] #:transparent)\n(define-struct group [name members] #:transparent)\n\n; full-title: OrgChart String -> OrgChart\n; Adds the name of the organization in parenthesis\n; to every person in the org chart.\n(define (full-title org name)",
    "doctests": "original",
    "original": "racket-prompts\\org_trees.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal?\n (full-title (make-person \"Joseph E. Aoun\"\n               \"President\"\n               (list (make-group \"Cabinet\"\n              (list (make-person \"Karl Reid\"\n                                 \"Senior Vice Provost and Inclusion Officer\"\n                                 '())\n                    (make-person \"Madeleine Estabrook\"\n                                 \"Senior Advisor for Global Student Experience\"\n                                 '())\n                    (make-person \"David Madigan\"\n               \"Provost and Senior Vice President for Academic Affairs\"\n               (list\n                (make-group \"Administration\"\n                            (list (make-person \"Thomas Sheahan\"\n                                               \"Senior Vice Provost, Curriculum and Programs\" '())))\n                (make-group \"Academic Deans\"\n                            (list (make-person \"Alan Mislove\"\n                                               \"Interim Dean, Khoury College of Computer Sciences\"\n                                               '())\n                                  (make-person \"Carmen Sceppa\"\n                                               \"Dean, Bouv\u00c3\u00a9 College of Health Sciences\"\n                                               '())\n                                  (make-person \"Uta G. Poiger\"\n                                               \"Dean, College of Social Sciences & Humanities\"\n                                               '()))))))))) \"Northeastern University\")\n (make-person\n  \"Joseph E. Aoun\"\n  \"President (Northeastern University)\"\n  (list\n   (make-group\n    \"Cabinet\"\n    (list\n     (make-person \"Karl Reid\"\n                  \"Senior Vice Provost and Inclusion Officer (Northeastern University)\"\n                  '())\n     (make-person \"Madeleine Estabrook\"\n                  \"Senior Advisor for Global Student Experience (Northeastern University)\"\n                  '())\n     (make-person\n      \"David Madigan\"\n      \"Provost and Senior Vice President for Academic Affairs (Northeastern University)\"\n      (list\n       (make-group\n        \"Administration\"\n        (list (make-person\n               \"Thomas Sheahan\"\n               \"Senior Vice Provost, Curriculum and Programs (Northeastern University)\" '())))\n       (make-group\n        \"Academic Deans\"\n        (list (make-person\n               \"Alan Mislove\"\n               \"Interim Dean, Khoury College of Computer Sciences (Northeastern University)\"\n               '())\n              (make-person\n               \"Carmen Sceppa\"\n               \"Dean, Bouv\u00c3\u00a9 College of Health Sciences (Northeastern University)\"\n               '())\n              (make-person\n               \"Uta G. Poiger\"\n               \"Dean, College of Social Sciences & Humanities (Northeastern University)\"\n               '()))))))))))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "points_and_lines",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Point is:\n;; - (make-point Number Number)\n;; Interpretation: A point on a cartesian plane\n(define-struct point [x y] #:transparent)\n\n;; A Line is:\n;; - (make-line Point Point)\n;; Interpretation: A straight line between two points\n(define-struct line [start end] #:transparent)\n\n;; manhattan-distance: Line -> Number\n;; Computes the manhattan distance that a line covers\n;; manhattan distance = |x_1 - x_2| + |y_1 - y_2|\n(define (manhattan-distance l)",
    "doctests": "original",
    "original": "racket-prompts\\points_and_lines.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (manhattan-distance (make-line (make-point 0 0) (make-point 4 3))) 7)\n(check-equal? (manhattan-distance (make-line (make-point 1 3) (make-point 4 3))) 3)\n(check-equal? (manhattan-distance (make-line (make-point 4 2) (make-point 4 3))) 1)\n(check-equal? (manhattan-distance (make-line (make-point 5 8) (make-point 4 3))) 6)\n(check-equal? (manhattan-distance (make-line (make-point 7 0) (make-point 7 -5))) 5)\n(check-equal? (manhattan-distance (make-line (make-point 4 0) (make-point -4 0))) 8)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "series",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Computable is:\n;; - (make-computable X [X -> X])\n;; Interpretation: A value that can be processed by the function to make a series\n(define-struct computable [value func] #:transparent)\n\n;; update: Computable -> Computable\n;; Runs the computable to make the next computable in the series\n(define (update c)",
    "doctests": "original",
    "original": "racket-prompts\\series.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(define (add-one x) (+ x 1))\n(check-equal? (update (make-computable 5 add-one)) (make-computable 6 add-one))\n(define (repeat-string s) (string-append s s))\n(check-equal? (update (make-computable \"hi\" repeat-string)) (make-computable \"hihi\" repeat-string))\n(define (divide-2 x) (/ x 2))\n(check-equal? (update (make-computable 6 divide-2)) (make-computable 3 divide-2))",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "shapes",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A Shape is one of:\n;; - (make-circle Number)\n;; - (make-rectangle Number Number)\n;; - (make-triangle Number Number Number)\n;; Interpretation: A closed shape\n(define-struct circle [radius] #:transparent)\n(define-struct rectangle [w l] #:transparent)\n(define-struct triangle [s1 s2 s3] #:transparent)\n\n;; circle-perimeter: Circle -> Number\n;; Computes the perimeter of a circle\n(define (circle-perimeter c)\n    (* 6.28 (circle-radius c)))\n\n;; rectangle-perimeter: Rectangle -> Number\n;; Computes the perimeter of a rectangle\n(define (rectangle-perimeter r)\n    (+ (* 2 (rectangle-w r)) (* 2 (rectangle-l r))))\n\n;; triangle-perimeter: Triangle -> Number\n;; Computes the perimeter of a triangle\n(define (triangle-perimeter t)\n    (+ (triangle-s1 t) (+ (triangle-s2 t) (triangle-s3 t))))\n\n;; shape-perimeter: Shape -> Number\n;; Computes the perimeter of any Shape\n(define (shape-perimeter s)",
    "doctests": "original",
    "original": "racket-prompts\\shapes.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (shape-perimeter (make-circle 2)) 12.56)\n(check-equal? (shape-perimeter (make-rectangle 2 4)) 12)\n(check-equal? (shape-perimeter (make-triangle  3 3 3)) 9)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  },
  {
    "name": "social_time",
    "language": "rkt",
    "prompt": "#lang racket\n(require rackunit)\n\n;; A CallType is one of:\n;; - \"zoom\"\n;; - \"teams\"\n;; - \"phone\"\n;; Interpretation: a type of call\n\n(define CT-ZOOM \"zoom\")\n(define CT-TEAMS \"teams\")\n(define CT-PHONE \"phone\")\n\n;; An Event is one of:\n;; - (make-call CallType PosInt [NEList-of String] String)\n;; - (make-mtg PosInt [NEList-of String] String)\n;; - (make-alone PosInt String)\n;; Interpretation: an event in some period of time, which is either:\n;; - A call using some technology, lasting some number of minutes with attendees\n;;  (by name), and a description;\n;; - An in-person meeting lasting some number of minutes\n;;   with attendees (by name) and a description; or\n;; - Time spent alone for some number of minutes with a description.\n(define-struct call [type duration attendees description] #:transparent)\n(define-struct mtg [duration attendees description] #:transparent)\n(define-struct alone [duration description] #:transparent)\n\n;; social-time : Event -> PosInt\n;; gets the duration of calls and meetings; 0 for alone\n(define (social-event-time e)\n  (cond\n    [(call? e) (call-duration e)]\n    [(mtg? e) (mtg-duration e)]\n    [(alone? e) 0]))\n\n;; social-time : [List-of Event] -> PosInt\n;; how much time was spent on calls and meetings?\n(define (social-time loe)",
    "doctests": "original",
    "original": "racket-prompts\\social_time.rkt",
    "prompt_terminology": "verbatim",
    "tests": "(check-equal? (social-time '()) 0)\n(check-equal? (social-time (list (make-call CT-ZOOM 22 (list \"Dr. Zoidberg\")\n             \"Doctor appointment about a stomach ache after some bad seafood :(\") \n             (make-alone 25 \"The Three-Body Problem isn't going to read itself!\") \n             (make-call CT-PHONE 1 (list \"Unknown\") \"Who calls!? I think it was a scam...\")\n                (make-alone 34 \"Lunch\") \n                (make-call CT-TEAMS 7 (list \"Mike\" \"Tajel\")\n             \"Office hours with my partner to ask clarifying questions about the Design Recipe!\") \n                (make-mtg 28 (list \"Ali\")\n            \"Meeting with advisor to talk about a combined major\")\n                 (make-mtg 62 (list \"Rachel\" \"Ross\" \"Joey\" \"Phoebe\" \"Chandler\" \"Monica\")\n            \"Getting ahead on studying for Exam 2!\"))) 120)",
    "stop_tokens": [
      "\n(define ",
      "\n#|",
      "\n;",
      "\n("
    ]
  }
]