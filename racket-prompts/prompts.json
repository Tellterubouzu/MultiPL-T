[
  {
    "prompt": ";; A ListofString (LoS) is one of:\n;; - '()\n;; - (cons String LoS)\n;; Interpretation: A list of strings.\n\n;; contains-three-letter-string? : LoS -> Boolean\n;; Determines if the list contains a three-letter string.\n(define (contains-three-letter-string? los)",
    "tests": "(check-expect (contains-three-letter-string? '()) #false)\n(check-expect (contains-three-letter-string? \n                    (cons \"susie\"\n                       (cons \"robert baratheon\"\n                             (cons \"alice\" '())))) #false)\n(check-expect (contains-three-letter-string? \n                    (cons \"bob\" \n                        (cons \"susie\"\n                            (cons \"robert baratheon\"\n                                (cons \"alice\" '()))))) #true)"
  },
  {
    "prompt": ";; A Guitar is a (make-guitar String String Boolean)\n;; Interpretation: A (make-guitar brand-name color electric?) represents a \n;; guitar where:\n;; - brand-name is the brand name of the guitar\n;; - color is the color of the guitar\n;; - electric? is a boolean indicating whether the guitar is electric\n(define-struct guitar [brand-name color electric?])\n\n;; A DrumKit is a (make-drum-kit String Boolean)\n;; Interpretation: A (make-drum-kit brand-name electric?) represents\n;; a drum kit where:\n;; - brand-name is the brand name of the drum kit\n;; - electric? is a boolean indicating whether the drum kit is electric\n(define-struct drum-kit [brand-name electric?])\n\n;; A Saxophone is a (make-saxophone String)\n;; Interpretation: A (make-saxophone brand-name) represents a saxophone where:\n;; - brand-name is the brand name of the saxophone\n(define-struct saxophone [brand-name])\n\n;; A Piano is a (make-piano String)\n;; Interpretation: A (make-piano brand-name) represents a piano where:\n;; - brand-name is the brand name of the piano\n(define-struct piano [brand-name])\n\n;; An Instrument is one of:\n;; - Guitar\n;; - DrumKit\n;; - Saxophone\n;; - Piano\n;; Interpretation: An Instrument is one of the four musical instruments.\n\n;; A Band is one of:\n;; - (make-one-piece-band Instrument)\n;; - (make-two-piece-band Instrument Instrument)\n;; - (make-three-piece-band Instrument Instrument Instrument)\n;; Interpretation: A Band represents a band with one, two, or three members.\n(define-struct one-piece-band (instrument))\n(define-struct two-piece-band (instrument1 instrument2))\n(define-struct three-piece-band (instrument1 instrument2 instrument3))\n\n;; electrify-guitar : Guitar -> Guitar\n;; Makes this an electric guitar!\n(define (electrify-guitar g)\n  (make-guitar (guitar-brand-name g) (guitar-color g) #true))\n\n;; electrify-drum-kit : DrumKit -> DrumKit\n;; Makes this an electric drum kit!\n(define (electrify-drum-kit d)\n  (make-drum-kit (drum-kit-brand-name d) #true))\n\n;; electrify-instrument : Instrument -> Instrument\n;; Makes this an electric instrument!\n(define (electrify-instrument i)\n  (cond\n    [(guitar? i) (electrify-guitar i)]\n    [(drum-kit? i) (electrify-drum-kit i)]\n    [(saxophone? i) i]\n    [(piano? i) i]))\n\n;; electrify-band : Band -> Band\n;; Makes this an electric band!\n(define (electrify-band b)",
    "tests": "(check-expect (electrify-band \n                (make-one-piece-band (make-guitar \"Stratocaster\" \"red\" #true))) \n                    (make-one-piece-band (make-guitar \"Stratocaster\" \"red\" #true)))\n(check-expect (electrify-band \n                (make-two-piece-band (make-drum-kit \"Korg\" #true) (make-drum-kit \"Korg\" #false)))\n                    (make-two-piece-band (make-drum-kit \"Korg\" #true)\n                                   (make-drum-kit \"Korg\" #true)))\n(check-expect (electrify-band \n                (make-three-piece-band (make-guitar \"Stratocaster\" \"red\" #true) (make-drum-kit \"Korg\" #false) (make-saxophone \"Yamaha\")))\n                    (make-three-piece-band (make-guitar \"Stratocaster\" \"red\" #true)\n                                     (make-drum-kit \"Korg\" #true)\n                                     (make-saxophone \"Yamaha\")))"
  },
  {
    "prompt": ";; CompassDirection is one of:\n;; - \"North\"\n;; - \"Northeast\"\n;; - \"East\"\n;; - \"Southeast\"\n;; - \"South\"\n;; - \"Southwest\"\n;; - \"West\"\n;; - \"Northwest\"\n\n(define NORTH \"North\")\n(define NORTHEAST \"Northeast\")\n(define EAST \"East\")\n(define SOUTHEAST \"Southeast\")\n(define SOUTH \"South\")\n(define SOUTHWEST \"Southwest\")\n(define WEST \"West\")\n(define NORTHWEST \"Northwest\")\n\n;; is-cardinal? : CompassDirection -> Boolean\n;; Produces #true when a compass direction is a cardinal direction.\n;; The cardinal directions are North, South, East, and West\n(define (is-cardinal? cd)",
    "tests": "(check-expect (is-cardinal? \"North\") #true)\n(check-expect (is-cardinal? \"Northeast\") #false)\n(check-expect (is-cardinal? \"East\") #true)\n(check-expect (is-cardinal? \"Southeast\") #false)\n(check-expect (is-cardinal? \"South\") #true)\n(check-expect (is-cardinal? \"Southwest\") #false)\n(check-expect (is-cardinal? \"West\") #true)\n(check-expect (is-cardinal? \"Northwest\") #false)\n"
  },
  {
    "prompt": ";; A DNASeq is one of:\n;; - (make-adenine DNASeq)\n;; - (make-guanine DNASeq)\n;; - (make-cytosine DNASeq)\n;; - (make-thymine DNASeq)\n;; - \"empty sequence\"\n;; Interpretation: A DNASeq represents a sequence of nucleotides.\n(define-struct adenine [rest])\n(define-struct guanine [rest])\n(define-struct cytosine [rest])\n(define-struct thymine [rest])\n\n;; Every  DNA sequence has a complementary sequence, which substitutes\n;; As with Ts, Ts with As, Cs with Gs, and Gs with Cs. Design a function\n;; to calculate the complement of a DNA sequence.\n\n;; dna-complement : DNASeq -> DNASeq\n;; Computes the complement of a DNA sequence.\n(define (dna-complement d)",
    "tests": "(check-expect (dna-complement \"empty sequence\") \"empty sequence\")\n(check-expect (dna-complement (make-adenine \"empty sequence\")) (make-thymine \"empty sequence\"))\n(check-expect (dna-complement (make-thymine (make-cytosine (make-guanine (make-adenine \"empty sequence\")))))\n              (make-adenine (make-guanine (make-cytosine (make-thymine \"empty sequence\")))))"
  },
  {
    "prompt": ";; A ListofString (LoS) is one of:\n;; - '()\n;; - (cons String LoS)\n;; Interpretation: A list of strings.\n\n;; hello-list : LoS -> LoS\n;; Adds \"Hello, \" to the beginning of every string in the LoS.\n(define (hello-list los)",
    "tests": "(check-expect (hello-list '()) '())\n(check-expect (hello-list \n                (cons \"susie\"\n                       (cons \"robert baratheon\"\n                             (cons \"alice\" '()))))\n              (cons \"Hello, susie\"\n                    (cons \"Hello, robert baratheon\"\n                          (cons \"Hello, alice\" '()))))\n(check-expect (hello-list \n                (cons \"bob\" \n                    (cons \"susie\"\n                        (cons \"robert baratheon\"\n                            (cons \"alice\" '())))))\n                (cons \"Hello, bob\"\n                        (cons \"Hello, susie\"\n                            (cons \"Hello, robert baratheon\"\n                                    (cons \"Hello, alice\" '())))))"
  },
  {
    "prompt": ";; CompassDirection is one of:\n;; - \"North\"\n;; - \"Northeast\"\n;; - \"East\"\n;; - \"Southeast\"\n;; - \"South\"\n;; - \"Southwest\"\n;; - \"West\"\n;; - \"Northwest\"\n\n(define NORTH \"North\")\n(define NORTHEAST \"Northeast\")\n(define EAST \"East\")\n(define SOUTHEAST \"Southeast\")\n(define SOUTH \"South\")\n(define SOUTHWEST \"Southwest\")\n(define WEST \"West\")\n(define NORTHWEST \"Northwest\")\n\n;; opposite-direction : CompassDirection -> CompassDirection\n;; Produces the opposite direction of a compass direction.\n;; i.e North is the opposite of South, and East is the opposite of West\n(define (opposite-direction cd)",
    "tests": "(check-expect (opposite-direction \"North\") \"South\")\n(check-expect (opposite-direction \"Northeast\") \"Southwest\")\n(check-expect (opposite-direction \"East\") \"West\")\n(check-expect (opposite-direction \"Southeast\") \"Northwest\")\n(check-expect (opposite-direction \"South\") \"North\")\n(check-expect (opposite-direction \"Southwest\") \"Northeast\")\n(check-expect (opposite-direction \"West\") \"East\")\n(check-expect (opposite-direction \"Northwest\") \"Southeast\")"
  }
]